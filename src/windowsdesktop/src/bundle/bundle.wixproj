<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>
    
    <!-- Runtime identifiers for multi-architecture support -->
    <RuntimeIdentifiers>win-x64;win-x86;win-arm64</RuntimeIdentifiers>
    
    <!-- Version information for the bundle executable -->
    <AssemblyTitle>Microsoft Windows Desktop Runtime Installer</AssemblyTitle>
    <AssemblyDescription>Microsoft Windows Desktop Runtime $(Version) Installer</AssemblyDescription>
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Windows Desktop Runtime</AssemblyProduct>
    <AssemblyCopyright>Â© Microsoft Corporation. All rights reserved.</AssemblyCopyright>
    <AssemblyInformationalVersion>$(Version)</AssemblyInformationalVersion>
    <AssemblyFileVersion>$(Version)</AssemblyFileVersion>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    
    <!-- Fix WiX v5 pdbType issue - try multiple approaches -->
    <WixToolsetCompilerPdbType>full</WixToolsetCompilerPdbType>
    <WixToolsetLinkerPdbType>full</WixToolsetLinkerPdbType>
    <PdbType>full</PdbType>
    <WixPdbType>full</WixPdbType>
    
    <!-- Suppress WiX warning about pdbType -->
    <NoWarn>$(NoWarn);WIX1098</NoWarn>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*;theme\**\*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" />
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" />
  </ItemGroup>

  <ItemGroup>
    <!-- Ensure the Windows Desktop Runtime is built before this bundle -->
    <ProjectReference Include="..\sfx\Microsoft.WindowsDesktop.App.Runtime.sfxproj" />
  </ItemGroup>

  <!-- Obtain the .NET Core Runtime installers from the VS insertion packages. -->
  <Target Name="CollectVSInsertionPackageDownloads"
          BeforeTargets="CollectPackageReferences">
    <ItemGroup>
      <_RuntimeIdentifierForNETCoreMsiRestore Include="$(RuntimeIdentifiers)" />
    </ItemGroup>

    <ItemGroup>
      <InsertionPackageRID
        Include="@(_RuntimeIdentifierForNETCoreMsiRestore)"
        Condition="'$(RuntimeIdentifier)' == '%(Identity)'"
        Arch="$([System.String]::new('%(Identity)').Replace('win-', ''))" />

      <NETCoreAppInstallerMsiRID Include="@(InsertionPackageRID)" Name="runtime" InsertionName="SharedFramework" />
      <NETCoreAppInstallerMsiRID Include="@(InsertionPackageRID)" Name="hostfxr" InsertionName="HostFXR" />
      <NETCoreAppInstallerMsiRID Include="@(InsertionPackageRID)" Name="host" InsertionName="SharedHost" />

      <NETCoreAppInstallerMsiRID
        Id="VS.Redist.Common.NetCore.%(InsertionName).%(Arch).10.0"
        Version="$(MicrosoftNETCorePlatformsVersion)"
        MsiFileName="dotnet-%(Name)-$(MicrosoftNETCoreAppRefVersion)-%(Identity).msi" />

      <PackageDownload Include="@(NETCoreAppInstallerMsiRID -> '%(Id)')" Version="[%(Version)]" />
    </ItemGroup>
  </Target>

  <!-- Determine .NET Core Runtime MSI locations from both NuGet packages and local artifacts -->
  <Target Name="GetBundledNETCoreRuntimeMsiFiles"
          DependsOnTargets="CollectVSInsertionPackageDownloads"
          BeforeTargets="SetInstallerInfo">
    <ItemGroup>
      <NETCoreAppInstallerMsiRID
        CacheDir="$(NuGetPackageRoot)$([System.String]::new('%(Id)').ToLowerInvariant())\%(Version)\" />

      <_AvailableNuGetMsiFiles
        Include="@(NETCoreAppInstallerMsiRID -> '%(CacheDir)%(MsiFileName)')"
        Condition="'$(RuntimeIdentifier)' == '%(Identity)' AND Exists('%(CacheDir)%(MsiFileName)')" />
    </ItemGroup>

    <!-- Set properties for available MSI files -->
    <PropertyGroup>
      <DotNetRuntimeMsiFromNuGet>@(_AvailableNuGetMsiFiles->WithMetadataValue('Name', 'runtime'))</DotNetRuntimeMsiFromNuGet>
      <DotNetHostFxrMsiFromNuGet>@(_AvailableNuGetMsiFiles->WithMetadataValue('Name', 'hostfxr'))</DotNetHostFxrMsiFromNuGet>
      <DotNetHostMsiFromNuGet>@(_AvailableNuGetMsiFiles->WithMetadataValue('Name', 'host'))</DotNetHostMsiFromNuGet>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="GetBundledNETCoreRuntimeMsiFiles">
    <PropertyGroup>
      <!-- Core version information -->
      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);PatchVersion=$(PatchVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      
      <!-- Bundle metadata -->
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);UpgradeCode={39A4DBC3-2C46-4F31-9C0D-E4B1B4B526DE}</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>
      <DefineConstants>$(DefineConstants);BUNDLEMONIKER=Microsoft Windows Desktop Runtime $(Version)</DefineConstants>
      
      <!-- Architecture definitions -->
      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <!-- Product and version related preprocessor definitions. -->
      <DefineConstants>$(DefineConstants);ProductName=$(SdkBrandName) ($(TargetArchitecture))</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <!-- Additional variables for localization -->
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MINIMUMVSVERSION=$(MinimumVSVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);PRODUCT_NAME=$(SdkBrandName)</DefineConstants>
      <DefineConstants>$(DefineConstants);DOTNETHOME=[ProgramFiles6432Folder]dotnet</DefineConstants>
      <DefineConstants>$(DefineConstants);LINK_PREREQ_PAGE=https://aka.ms/dotnet-requirements</DefineConstants>

      <!-- PlatformToken is used to generate a generate a WiX variable name using a preprocessor variable so casing matters. -->
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>

      <!-- Source path for the Windows Desktop Runtime MSI -->
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</DefineConstants>

      <!-- Determine .NET Runtime MSI sources: prefer NuGet packages, fallback to local artifacts -->
      <!-- .NET Runtime MSI -->
      <DotNetRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\dotnet-runtime-$(Version)-win-$(TargetArchitecture).msi</DotNetRuntimeMsiPath>
      <DotNetRuntimeMsiPath Condition="'$(DotNetRuntimeMsiFromNuGet)' != ''">$(DotNetRuntimeMsiFromNuGet)</DotNetRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
      
      <!-- .NET HostFxr MSI -->
      <DotNetHostFxrMsiPath>$(ArtifactsPackagesDir)Shipping\dotnet-hostfxr-$(Version)-win-$(TargetArchitecture).msi</DotNetHostFxrMsiPath>
      <DotNetHostFxrMsiPath Condition="'$(DotNetHostFxrMsiFromNuGet)' != ''">$(DotNetHostFxrMsiFromNuGet)</DotNetHostFxrMsiPath>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath)</DefineConstants>
      
      <!-- .NET Host MSI -->
      <DotNetHostMsiPath>$(ArtifactsPackagesDir)Shipping\dotnet-host-$(Version)-win-$(TargetArchitecture).msi</DotNetHostMsiPath>
      <DotNetHostMsiPath Condition="'$(DotNetHostMsiFromNuGet)' != ''">$(DotNetHostMsiFromNuGet)</DotNetHostMsiPath>
      <DefineConstants>$(DefineConstants);DotNetHostMsiPath=$(DotNetHostMsiPath)</DefineConstants>
      
      <!-- Check if .NET Core MSI files exist and set flags -->
      <DotNetRuntimeMsiExists>false</DotNetRuntimeMsiExists>
      <DotNetRuntimeMsiExists Condition="Exists('$(DotNetRuntimeMsiPath)')">true</DotNetRuntimeMsiExists>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiExists=$(DotNetRuntimeMsiExists)</DefineConstants>
      
      <DotNetHostFxrMsiExists>false</DotNetHostFxrMsiExists>
      <DotNetHostFxrMsiExists Condition="Exists('$(DotNetHostFxrMsiPath)')">true</DotNetHostFxrMsiExists>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiExists=$(DotNetHostFxrMsiExists)</DefineConstants>
      
      <DotNetHostMsiExists>false</DotNetHostMsiExists>
      <DotNetHostMsiExists Condition="Exists('$(DotNetHostMsiPath)')">true</DotNetHostMsiExists>
      <DefineConstants>$(DefineConstants);DotNetHostMsiExists=$(DotNetHostMsiExists)</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>
  </Target>

  <!-- Copy bundle.exe to shipping directory after build -->
  <Target Name="CopyBundleToShipping" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Copied bundle to shipping directory: $(BundleShippingPath)" Importance="high" />
  </Target>

</Project>
