<Project>
  <!-- Extracted WiX build targets for Windows Desktop Runtime bundle -->

  <!-- Deterministic prerequisite runtime MSI staging -->
  <Target Name="StagePrereqRuntimeMsis" BeforeTargets="_GetBundledComponentInstallers">
    <PropertyGroup>
      <PrereqRuntimeMsisDir>$(ArtifactsRoot)prereqs\$(TargetArchitecture)\</PrereqRuntimeMsisDir>
      <PrereqRuntimeMsisDir Condition="'$(ArtifactsRoot)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\prereqs\$(TargetArchitecture)\</PrereqRuntimeMsisDir>
    </PropertyGroup>

    <ItemGroup Condition="Exists('$(PrereqRuntimeMsisDir)')">
      <_PrereqHost Include="$(PrereqRuntimeMsisDir)dotnet-host-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-host-win-$(TargetArchitecture).msi')" />
      <_PrereqHostFxr Include="$(PrereqRuntimeMsisDir)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />
      <_PrereqRuntime Include="$(PrereqRuntimeMsisDir)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-runtime-win-$(TargetArchitecture).msi')" />
    </ItemGroup>

    <PropertyGroup>
      <PrereqMsisAvailable Condition="'@(_PrereqHost)' != '' AND '@(_PrereqHostFxr)' != '' AND '@(_PrereqRuntime)' != ''">true</PrereqMsisAvailable>
      <PrereqMsisAvailable Condition="'$(PrereqMsisAvailable)'==''">false</PrereqMsisAvailable>
    </PropertyGroup>

    <Message Importance="high" Text="[PrereqRuntime] Dir=$(PrereqRuntimeMsisDir) Available=$(PrereqMsisAvailable)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] Host=@(_PrereqHost)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] HostFxr=@(_PrereqHostFxr)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] Runtime=@(_PrereqRuntime)" />

    <Message Condition="'$(ContinuousIntegrationBuild)'=='true' AND '$(System_TeamProject)'!='public' AND '$(PrereqMsisAvailable)'!='true' AND (@(_PrereqHost)!='' OR @(_PrereqHostFxr)!='' OR @(_PrereqRuntime)!='')" Importance="high" Text="Partial prerequisite runtime MSIs detected (some files missing). Provide all three or none." />
    <Message Condition="'$(System_TeamProject)'=='public' AND '$(PrereqMsisAvailable)'!='true'" Importance="high" Text="Public build: runtime prerequisite MSIs not staged; bundle will exclude them (WindowsDesktop MSI only)." />

    <PropertyGroup Condition="'$(PrereqMsisAvailable)'=='true'">
      <DotNetHostMsiPath>@(_PrereqHost)</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath>@(_PrereqHostFxr)</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath>@(_PrereqRuntime)</DotNetRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=true;DotNetHostMsiPath=$(DotNetHostMsiPath);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(PrereqMsisAvailable)'!='true'">
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=false</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="StagePrereqRuntimeMsis">
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' != ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).$(VersionSuffixDateStamp)</DefineConstants>
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' == ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).50000</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>

      <UpgradeCodeSeed>Windows Desktop Shared Framework Bundle Installer</UpgradeCodeSeed>
      <UpgradeCodeSeedWithArch>$(UpgradeCodeSeed) $(TargetArchitecture) $(MajorVersion).$(MinorVersion)</UpgradeCodeSeedWithArch>

      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>

    <Message Text="Bundle MSI Components:" Importance="high" />
    <Message Text="  Windows Desktop Runtime: $(WindowsDesktopRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(WindowsDesktopRuntimeMsiPath)')))" Importance="high" />
  </Target>

  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <Target Name="GenerateUpgradeCode" AfterTargets="SetInstallerInfo">
    <GenerateGuidFromName Name="$(UpgradeCodeSeedWithArch)">
      <Output TaskParameter="GeneratedGuid" PropertyName="GeneratedUpgradeCode" />
    </GenerateGuidFromName>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);UpgradeCode={$(GeneratedUpgradeCode)}</DefineConstants>
    </PropertyGroup>
    <Message Text="Generated UpgradeCode for $(TargetArchitecture) v$(MajorVersion).$(MinorVersion): {$(GeneratedUpgradeCode)} from seed '$(UpgradeCodeSeedWithArch)'" Importance="high" />
  </Target>

  <Target Name="Pack" DependsOnTargets="Build;PublishBundle">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

  <!-- Generate a wixpack using the Wix toolset task (pattern aligned with aspnetcore). -->
  <Target Name="GenerateWixpackPackage" AfterTargets="CoreCompile" Condition="'$(WixCreateWixPackOutput)'=='true'">
    <PropertyGroup>
      <WixpackWorkingDir>$(IntermediateOutputPath)wixpack</WixpackWorkingDir>
      <!-- Ensure WixCommandPackagesDir has a default value -->
      <WixpackOutputDir Condition="'$(WixCommandPackagesDir)'!=''">$(WixCommandPackagesDir)</WixpackOutputDir>
      <WixpackOutputDir Condition="'$(WixCommandPackagesDir)'==''">$(ArtifactsPackagesDir)Debug\NonShipping</WixpackOutputDir>
      <!-- Expected wixpack file name produced by CreateWixBuildWixpack (avoid duplicate creation if Light already produced one) -->
      <ExpectedBundleWixpackFile>$(WixpackOutputDir)\$(TargetFileName).wixpack.zip</ExpectedBundleWixpackFile>
      <!-- PDB name follows Wix default: TargetName + .wixpdb -->
      <_BundlePdbFile>$(TargetDir)$(TargetName).wixpdb</_BundlePdbFile>
    </PropertyGroup>
    <Message Text="[Wixpack] WixpackOutputDir=$(WixpackOutputDir)" Importance="high" />
    <Message Text="[Wixpack] Existing wixpack detected at $(ExpectedBundleWixpackFile); skipping custom generation" Importance="high" Condition="Exists('$(ExpectedBundleWixpackFile)')" />
    <CreateWixBuildWixpack
        Condition="!Exists('$(ExpectedBundleWixpackFile)') AND '$(WixpackOutputDir)'!=''"
        InstallerPlatform="$(InstallerPlatform)"
        InstallerFile="$(TargetPath)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        OutputFolder="$(WixpackOutputDir)"
        OutputType="$(OutputType)"
        PdbFile="$(_BundlePdbFile)"
        PdbType="$(DebugType)"
        SourceFiles="@(Compile)"
        Extensions="@(_ResolvedWixExtensionPaths)"
        LocalizationFiles="@(_WixLocalizationFile)"
        BindPaths="@(BindPath)"
        WixpackWorkingDir="$(WixpackWorkingDir)"
        DefineConstants="$(DefineConstants)">
      <Output TaskParameter="OutputFile" PropertyName="_WixBuildCommandPackageNameOutput" />
    </CreateWixBuildWixpack>
    <Message Text="[Wixpack] Generated: $(_WixBuildCommandPackageNameOutput)" Importance="high" Condition="'$(_WixBuildCommandPackageNameOutput)'!=''" />
  </Target>
</Project>
