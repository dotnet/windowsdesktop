<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>
    
    <!-- Enable WiX v5 features (following reference repo pattern) -->
    <UseWix5>true</UseWix5>
    
    <!-- Runtime identifiers for multi-architecture support -->
    <RuntimeIdentifiers>win-x64;win-x86;win-arm64</RuntimeIdentifiers>
    
    <!-- Version information for the bundle executable -->
    <AssemblyTitle>Microsoft Windows Desktop Runtime Installer</AssemblyTitle>
    <AssemblyDescription>Microsoft Windows Desktop Runtime $(Version) Installer</AssemblyDescription>
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Windows Desktop Runtime</AssemblyProduct>
    <AssemblyCopyright>Â© Microsoft Corporation. All rights reserved.</AssemblyCopyright>
    <AssemblyInformationalVersion>$(Version)</AssemblyInformationalVersion>
    <AssemblyFileVersion>$(Version)</AssemblyFileVersion>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    
    <!-- WiX v5 PDB configuration - bundles don't publish PDBs -->
    <WixToolsetCompilerPdbType>full</WixToolsetCompilerPdbType>
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <NoWarn>$(NoWarn);WIX1098</NoWarn>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*;theme\**\*</DefaultItemExcludes>
    
    <!-- Force the bundle UpgradeCode to match RC1 exactly so Burn detects prior versions for upgrade.
      RC1 manifest shows UpgradeCode {55414577-5A99-7937-6951-9CCC4BE8857E} (distinct from Bundle/Provider key {42091558-a8d7-4e3a-885b-aa746c7ed165}).
      Preserve this UpgradeCode for all subsequent 10.0.x releases to ensure in-place upgrade behavior. -->
    <WixBundleUpgradeCode>55414577-5A99-7937-6951-9CCC4BE8857E</WixBundleUpgradeCode>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <!-- Microsoft.Wix is a dotnet tool package, so exclude its assets (following reference repo pattern) -->
    <PackageReference Include="Microsoft.Wix" ExcludeAssets="all" />
    <!-- WiX extension packages with GeneratePathProperty for installers -->
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Dependency.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Heat" />
    
    <!-- Transport packages containing .NET runtime MSI files for bundle inclusion -->
    <PackageReference Include="vs.redist.common.netcore.sharedhost.x64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x64'" />
    <PackageReference Include="vs.redist.common.netcore.sharedhost.x86.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x86'" />
    <PackageReference Include="vs.redist.common.netcore.sharedhost.arm64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'arm64'" />
                      
    <PackageReference Include="vs.redist.common.netcore.hostfxr.x64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x64'" />
    <PackageReference Include="vs.redist.common.netcore.hostfxr.x86.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x86'" />
    <PackageReference Include="vs.redist.common.netcore.hostfxr.arm64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'arm64'" />
                      
    <PackageReference Include="vs.redist.common.netcore.sharedframework.x64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x64'" />
    <PackageReference Include="vs.redist.common.netcore.sharedframework.x86.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'x86'" />
    <PackageReference Include="vs.redist.common.netcore.sharedframework.arm64.10.0" 
                      GeneratePathProperty="true" 
                      Condition="'$(TargetArchitecture)' == 'arm64'" />
  </ItemGroup>

  <ItemGroup>
    <!-- Ensure the Windows Desktop Runtime is built before this bundle -->
    <ProjectReference Include="..\sfx\Microsoft.WindowsDesktop.App.Runtime.sfxproj" />
  </ItemGroup>

  <!-- Collect VS insertion packages for .NET Core runtime components -->
  <!-- Use PackageReference-generated path properties for reliable CI/local build compatibility -->
  <Target Name="GetBundledNETCoreRuntimeMsiFiles" BeforeTargets="SetInstallerInfo">
    <!-- Use PackageReference-generated path properties (generated automatically with GeneratePathProperty="true") -->
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'x64'">
      <_HostPackagePath>$(Pkgvs_redist_common_netcore_sharedhost_x64_10_0)</_HostPackagePath>
      <_HostFxrPackagePath>$(Pkgvs_redist_common_netcore_hostfxr_x64_10_0)</_HostFxrPackagePath>
      <_RuntimePackagePath>$(Pkgvs_redist_common_netcore_sharedframework_x64_10_0)</_RuntimePackagePath>
    </PropertyGroup>
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'x86'">
      <_HostPackagePath>$(Pkgvs_redist_common_netcore_sharedhost_x86_10_0)</_HostPackagePath>
      <_HostFxrPackagePath>$(Pkgvs_redist_common_netcore_hostfxr_x86_10_0)</_HostFxrPackagePath>
      <_RuntimePackagePath>$(Pkgvs_redist_common_netcore_sharedframework_x86_10_0)</_RuntimePackagePath>
    </PropertyGroup>
    <PropertyGroup Condition="'$(TargetArchitecture)' == 'arm64'">
      <_HostPackagePath>$(Pkgvs_redist_common_netcore_sharedhost_arm64_10_0)</_HostPackagePath>
      <_HostFxrPackagePath>$(Pkgvs_redist_common_netcore_hostfxr_arm64_10_0)</_HostFxrPackagePath>
      <_RuntimePackagePath>$(Pkgvs_redist_common_netcore_sharedframework_arm64_10_0)</_RuntimePackagePath>
    </PropertyGroup>

    <!-- Find MSI files within the PackageReference-resolved paths -->
    <ItemGroup>
      <!-- Look for MSI files in transport packages first, then fallback to local build artifacts -->
      <DotNetHostMsiCandidate Include="$(_HostPackagePath)\**\*.msi" Condition="'$(_HostPackagePath)' != ''" />
      <DotNetHostFxrMsiCandidate Include="$(_HostFxrPackagePath)\**\*.msi" Condition="'$(_HostFxrPackagePath)' != ''" />
      <DotNetRuntimeMsiCandidate Include="$(_RuntimePackagePath)\**\*.msi" Condition="'$(_RuntimePackagePath)' != ''" />
      
      <!-- Fallback to local build artifacts if transport packages not available -->
      <DotNetHostMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-host-*-win-$(TargetArchitecture).msi" Condition="'$(_HostPackagePath)' == ''" />
      <DotNetHostFxrMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-hostfxr-*-win-$(TargetArchitecture).msi" Condition="'$(_HostFxrPackagePath)' == ''" />
      <DotNetRuntimeMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-runtime-*-win-$(TargetArchitecture).msi" Condition="'$(_RuntimePackagePath)' == ''" />
    </ItemGroup>

    <!-- Select first available MSI from each group -->
    <PropertyGroup>
      <DotNetHostMsiPath>@(DotNetHostMsiCandidate, ';')</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath>@(DotNetHostFxrMsiCandidate, ';')</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath>@(DotNetRuntimeMsiCandidate, ';')</DotNetRuntimeMsiPath>
    </PropertyGroup>

    <!-- Take first item from semicolon-separated list -->
    <PropertyGroup>
      <DotNetHostMsiPath Condition="$(DotNetHostMsiPath.Contains(';'))">$(DotNetHostMsiPath.Split(';')[0])</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath Condition="$(DotNetHostFxrMsiPath.Contains(';'))">$(DotNetHostFxrMsiPath.Split(';')[0])</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath Condition="$(DotNetRuntimeMsiPath.Contains(';'))">$(DotNetRuntimeMsiPath.Split(';')[0])</DotNetRuntimeMsiPath>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="GetBundledNETCoreRuntimeMsiFiles">
    <PropertyGroup>
      <!-- Essential bundle metadata -->
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);BundleVersion=$(Version)</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>
      
      <!-- Generate UpgradeCodes to match RC1 - use standard Arcade approach -->
      <!-- Same base seed as RC1 for upgrade compatibility -->
      <BundleInstallerUpgradeCodeSeed>Windows Desktop Shared Framework Bundle Installer</BundleInstallerUpgradeCodeSeed>
      
      <!-- Architecture and platform -->
      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <!-- Version information -->
      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

  <!-- Provide UpgradeCode constant expected by bundle.wxs -->
  <DefineConstants>$(DefineConstants);UpgradeCode={$(WixBundleUpgradeCode)}</DefineConstants>

      <!-- Windows Desktop Runtime MSI (always from local build) -->
      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      
      <!-- Set MSI existence flags (simple ASP.NET Core style) -->
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiPath=$(DotNetHostMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiExists=$([System.IO.File]::Exists('$(DotNetHostMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiExists=$([System.IO.File]::Exists('$(DotNetHostFxrMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiExists=$([System.IO.File]::Exists('$(DotNetRuntimeMsiPath)'))</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>
    
    <!-- Simple logging -->
    <Message Text="Windows Desktop Runtime: $(WindowsDesktopRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(WindowsDesktopRuntimeMsiPath)')))" Importance="high" />
    <Message Text=".NET Host: $(DotNetHostMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetHostMsiPath)')))" Importance="high" />
    <Message Text=".NET HostFxr: $(DotNetHostFxrMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetHostFxrMsiPath)')))" Importance="high" />
    <Message Text=".NET Runtime: $(DotNetRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetRuntimeMsiPath)')))" Importance="high" />
      <Message Text="Bundle UpgradeCode: {$(WixBundleUpgradeCode)}" Importance="high" />
  </Target>

  <!-- Bundle publication to shipping directory -->
  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <!-- Removed late UpgradeCode override target. Setting WixBundleUpgradeCode property early ensures Candle picks it up. -->

  <!-- Pack target for CI compatibility -->
  <Target Name="Pack" DependsOnTargets="Build;PublishBundle">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

</Project>
