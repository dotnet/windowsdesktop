parameters:
  additionalMSBuildArguments: ''
  displayName: ''
  skipTests: $(SkipTests)
  targetArchitecture: null
  timeoutInMinutes: 120
  jobStrategy: null

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      # Use a hosted pool when possible.
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        vmImage: 'windows-2022'
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: NetCore1ESPool-Internal
        demands: ImageOverride -equals windows.vs2019.amd64

    # Allow caller to override the job strategy (e.g. to add an architecture matrix).
    ${{ if ne(parameters.jobStrategy, null) }}:
      strategy: ${{ parameters.jobStrategy }}
    ${{ else }}:
      strategy:
        matrix: 
          Debug:
            _BuildConfig: Debug
          Release:
            _BuildConfig: Release

    workspace:
      clean: all
    variables: 
      - name: CommonMSBuildArgs
        value: >-
          -c $(_BuildConfig)
          /p:TargetArchitecture=$(TargetArchitecture)
          /p:SkipTests=${{ parameters.skipTests }}
          /p:ContinuousIntegrationBuild=true
      - ${{ if ne(parameters.targetArchitecture, null) }}:
        - name: TargetArchitecture
          value: ${{ parameters.targetArchitecture }}
      - ${{ if eq(parameters.targetArchitecture, null) }}:
        - name: TargetArchitecture
          value: $(TargetArchitecture)
      - ${{ if eq(variables['System.TeamProject'], 'public') }}:
        - name: MsbuildSigningArguments
          value: /p:DotNetSignType=Test
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - name: MsbuildSigningArguments
          value: /p:DotNetSignType=Real

    steps:
    - template: /eng/common/templates/steps/enable-internal-sources.yml

    # Diagnostic: echo important variables early to help debug public vs internal gating
    - task: PowerShell@2
      displayName: 'Diagnostic: echo System.TeamProject and TargetArchitecture'
      condition: always()
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Diagnostic: System.TeamProject=$(System.TeamProject)"
          Write-Host "Diagnostic: TargetArchitecture=$(TargetArchitecture)"

    # Runtime prerequisite logic removed to match .NET 9 behavior. If/when needed,
    # prereq downloading/normalization can be reintroduced here.

    # Build the project
    - script: >-
        eng/common/cibuild.cmd
        $(CommonMSBuildArgs)
        $(MsbuildSigningArguments)
      displayName: Build

    - ${{ if ne(parameters.skipTests, 'true') }}:
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'xUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
          mergeTestResults: true
          testRunTitle: ${{ parameters.name }}-$(_BuildConfig)
        continueOnError: true
        condition: always()

    - task: PowerShell@2
      displayName: 'Gather and upload logs'
      condition: always()
      continueOnError: true
      script: |
        $logDirectories = @(
            "$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)",
            "$(Build.sourcesdirectory)/artifacts/TestResults/$(_BuildConfig)"
        )

        $stagingDirectory = "$(Build.ArtifactStagingDirectory)/Logs-$(_BuildConfig)"
        New-Item -ItemType Directory -Path $stagingDirectory -Force

        foreach ($dir in $logDirectories) {
            if (Test-Path $dir) {
                Write-Host "Copying logs from $dir"
                Copy-Item -Path "$dir/*" -Destination $stagingDirectory -Recurse -Force -ErrorAction SilentlyContinue
            } else {
                Write-Host "Log directory not found (this is okay if no tests ran or build failed early): $dir"
            }
        }
        Write-Host "Staged logs in $stagingDirectory"
        Get-ChildItem $stagingDirectory -Recurse | Select-Object FullName

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Logs ($(_BuildConfig))'
      condition: always()
      continueOnError: true
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/Logs-$(_BuildConfig)'
        ArtifactName: 'Logs_${{ parameters.name }}_$(_BuildConfig)'
