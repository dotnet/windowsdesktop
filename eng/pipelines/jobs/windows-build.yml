parameters:
  additionalMSBuildArguments: ''
  displayName: ''
  skipTests: $(SkipTests)
  targetArchitecture: null
  timeoutInMinutes: 120

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  strategy:
    matrix:
      Debug:
        _BuildConfig: Debug
      Release:
        _BuildConfig: Release
  workspace:
    clean: all
  variables:
  - name: CommonMSBuildArgs
    value: >-
      -c $(_BuildConfig)
      /p:OfficialBuildId=$(OfficialBuildId)
      /p:TargetArchitecture=${{ parameters.targetArchitecture }}
      /p:SkipTests=${{ parameters.skipTests }}
  - name: MsbuildSigningArguments
    value: /p:DotNetSignType=$(SignType)
  - name: TargetArchitecture
    value: ${{ parameters.targetArchitecture }}
  templateContext:
    outputs:
    - output: buildArtifacts
      displayName: 'Publish Artifacts'
      condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))
      PathtoPublish: '$(Build.StagingDirectory)/Artifacts'
      ArtifactName: IntermediateUnsignedArtifacts
      ArtifactType: container
    - output: pipelineArtifact
      displayName: 'Publish BuildLogs'
      condition: succeededOrFailed()
      targetPath: '$(Build.StagingDirectory)/BuildLogs'
      artifactName: Logs-${{ parameters.name }}-$(_BuildConfig)
  steps:
  - task: NuGetAuthenticate@1

  - task: PowerShell@2
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - task: MicroBuildSigningPlugin@4
    displayName: Install MicroBuild plugin for Signing
    inputs:
      signType: $(SignType)
      zipSources: false
      feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
    continueOnError: false
    condition: and(succeeded(), in(variables['SignType'], 'real', 'test'))
    # NuGet's http cache lasts 30 minutes. If we're on a static machine, this may interfere with
    # auto-update PRs by preventing the CI build from fetching the new version. Delete the cache.
  - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
    displayName: Clear NuGet http cache (if exists)

  - script: >-
      build.cmd -ci -test
      $(CommonMSBuildArgs)
      $(MsbuildSigningArguments)
    displayName: Build

    # Generate SBOM
  - template: /eng/common/templates-official/steps/generate-sbom.yml@self
    parameters:
      name: Generate_SBOM_${{ parameters.name }}

  - template: /eng/pipelines/steps/upload-job-artifacts.yml@self
    parameters:
      name: ${{ parameters.name }}