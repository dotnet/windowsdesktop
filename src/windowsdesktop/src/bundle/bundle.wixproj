<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>
    
    <!-- Runtime identifiers for multi-architecture support -->
    <RuntimeIdentifiers>win-x64;win-x86;win-arm64</RuntimeIdentifiers>
    
    <!-- Version information for the bundle executable -->
    <AssemblyTitle>Microsoft Windows Desktop Runtime Installer</AssemblyTitle>
    <AssemblyDescription>Microsoft Windows Desktop Runtime $(Version) Installer</AssemblyDescription>
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Windows Desktop Runtime</AssemblyProduct>
    <AssemblyCopyright>Â© Microsoft Corporation. All rights reserved.</AssemblyCopyright>
    <AssemblyInformationalVersion>$(Version)</AssemblyInformationalVersion>
    <AssemblyFileVersion>$(Version)</AssemblyFileVersion>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    
    <!-- WiX v5 PDB configuration - bundles don't publish PDBs -->
    <WixToolsetCompilerPdbType>full</WixToolsetCompilerPdbType>
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <NoWarn>$(NoWarn);WIX1098</NoWarn>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*;theme\**\*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" />
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" />
  </ItemGroup>

  <ItemGroup>
    <!-- Ensure the Windows Desktop Runtime is built before this bundle -->
    <ProjectReference Include="..\sfx\Microsoft.WindowsDesktop.App.Runtime.sfxproj" />
  </ItemGroup>

  <!-- Collect VS insertion packages for .NET Core runtime components -->
  <!-- Unified runtime component resolution following ASP.NET Core patterns -->
  <!-- Simple MSI Resolution (ASP.NET Core Style) -->
  <Target Name="GetBundledNETCoreRuntimeMsiFiles" BeforeTargets="SetInstallerInfo">
    <PropertyGroup>
      <_CurrentArch>$(RuntimeIdentifier.Replace('win-', ''))</_CurrentArch>
    </PropertyGroup>

    <!-- Look for runtime MSI files in typical locations (like ASP.NET Core does) -->
    <ItemGroup>
      <!-- Local build artifacts -->
      <DotNetHostMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-host-*-win-$(TargetArchitecture).msi" />
      <DotNetHostFxrMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-hostfxr-*-win-$(TargetArchitecture).msi" />
      <DotNetRuntimeMsiCandidate Include="$(ArtifactsPackagesDir)Shipping\dotnet-runtime-*-win-$(TargetArchitecture).msi" />
      
      <!-- Transport packages -->
      <DotNetHostMsiCandidate Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedhost.$(_CurrentArch).10.0\**\*.msi" />
      <DotNetHostFxrMsiCandidate Include="$(NuGetPackageRoot)vs.redist.common.netcore.hostfxr.$(_CurrentArch).10.0\**\*.msi" />
      <DotNetRuntimeMsiCandidate Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedframework.$(_CurrentArch).10.0\**\*.msi" />
    </ItemGroup>

    <!-- Select first available MSI from each group -->
    <PropertyGroup>
      <DotNetHostMsiPath>@(DotNetHostMsiCandidate, ';')</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath>@(DotNetHostFxrMsiCandidate, ';')</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath>@(DotNetRuntimeMsiCandidate, ';')</DotNetRuntimeMsiPath>
    </PropertyGroup>

    <!-- Take first item from semicolon-separated list -->
    <PropertyGroup>
      <DotNetHostMsiPath Condition="$(DotNetHostMsiPath.Contains(';'))">$(DotNetHostMsiPath.Split(';')[0])</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath Condition="$(DotNetHostFxrMsiPath.Contains(';'))">$(DotNetHostFxrMsiPath.Split(';')[0])</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath Condition="$(DotNetRuntimeMsiPath.Contains(';'))">$(DotNetRuntimeMsiPath.Split(';')[0])</DotNetRuntimeMsiPath>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="GetBundledNETCoreRuntimeMsiFiles">
    <PropertyGroup>
      <!-- Essential bundle metadata -->
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);BundleVersion=$(Version)</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);UpgradeCode={39A4DBC3-2C46-4F31-9C0D-E4B1B4B526DE}</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>
      
      <!-- Architecture and platform -->
      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <!-- Version information -->
      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <!-- Windows Desktop Runtime MSI (always from local build) -->
      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      
      <!-- Set MSI existence flags (simple ASP.NET Core style) -->
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiPath=$(DotNetHostMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiExists=$([System.IO.File]::Exists('$(DotNetHostMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiExists=$([System.IO.File]::Exists('$(DotNetHostFxrMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiExists=$([System.IO.File]::Exists('$(DotNetRuntimeMsiPath)'))</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>
    
    <!-- Simple logging -->
    <Message Text="Windows Desktop Runtime: $(WindowsDesktopRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(WindowsDesktopRuntimeMsiPath)')))" Importance="high" />
    <Message Text=".NET Host: $(DotNetHostMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetHostMsiPath)')))" Importance="high" />
    <Message Text=".NET HostFxr: $(DotNetHostFxrMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetHostFxrMsiPath)')))" Importance="high" />
    <Message Text=".NET Runtime: $(DotNetRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(DotNetRuntimeMsiPath)')))" Importance="high" />
  </Target>

  <!-- Bundle publication to shipping directory -->
  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <!-- Pack target for CI compatibility -->
  <Target Name="Pack" DependsOnTargets="Build;PublishBundle">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

</Project>
