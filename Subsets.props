<Project>

  <!--
    This file defines the list of projects to build and divides them into subsets. In ordinary
    situations, you should perform a full build by running 'build.cmd' or './build.sh'. This ensures
    the projects are sequenced correctly so the outputs and test results are what you would expect.

    If you know you only want to run a subset of the build, however, use the Subset property.

    Syntax:

      (build.cmd/sh) /p:Subset=<desired subset name 1>(-<desired subset name N>)*

      - For a description of each subset, use '/p:Subset=help'.
      - Subset names are case insensitive.
      - 'Subset' is case insensitive. (That is, '/p:subset' works.)
      - Order doesn't affect the result.

    Examples:

      ./build.sh /p:Subset=CoreHost

        This builds only the .NET Core Host.

      ./build.sh /p:Subset=CoreHost-Managed

        This builds the CoreHost and also the Managed (e.g. Microsoft.Extensions.DependencyModel)
        projects. A '-' is the delimiter between multiple subsets to build.

      ./build.sh -test /p:Subset=Test

        This builds and executes the test projects. (The '-test' argument is an Arcade SDK argument
        that indicates tests should be run. Otherwise, they'll only be built.)
  -->

  <PropertyGroup>
    <SubsetToLower>$(Subset.ToLowerInvariant())</SubsetToLower>
  </PropertyGroup>

  <ItemGroup>
    <SubsetName
      Include="Packages"
      Description="The packaging projects. These produce NETCoreApp and WindowsDesktop assets: NuGet packages, installers, zips, and Linux packages." />
  </ItemGroup>
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('packages'))">
    <PkgprojProjectToBuild Include="$(RepoRoot)pkg\**\*.sfxproj" SignPhase="MsiFiles" />
    <ProjectToBuild Include="@(PkgprojProjectToBuild)" />
  </ItemGroup>

  <ItemGroup>
    <SubsetName
      Include="Bundle"
      Description="The shared framework bundle installer projects. Produces .exe installers for Windows." />
  </ItemGroup>
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('bundle'))">
    <BundleProjectToBuild Include="$(RepoRoot)pkg\**\*.bundleproj" SignPhase="BundleInstallerFiles" />
    <ProjectToBuild Include="@(BundleProjectToBuild)" />
  </ItemGroup>

  <ItemGroup>
    <SubsetName
      Include="Badge"
      Description="Generates the official build badge. Displayed in the readme file." />
  </ItemGroup>
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('badge'))">
    <BadgeProjectToBuild Include="$(RepoRoot)pkg\badge\badge.proj" />
    <ProjectToBuild Include="@(BadgeProjectToBuild)" />
  </ItemGroup>

  <ItemGroup>
    <SubsetName
      Include="Test"
      Description="The test projects. Note that building this doesn't execute tests: you must also pass the '-test' argument." />
  </ItemGroup>
  <ItemGroup Condition="'$(SubsetToLower)' == '' or $(SubsetToLower.Contains('test'))">
    <TestProjectToBuild Include="$(RepoRoot)src\**\*.Tests.csproj" />
    <ProjectToBuild Include="@(TestProjectToBuild)" />
  </ItemGroup>

  <ItemGroup>
    <SubsetName
      Include="RegenerateReadmeTable"
      Description="Regenerates the table of asset links in the README.md file."
      OnDemand="true"/>
  </ItemGroup>
  <ItemGroup Condition="$(SubsetToLower.Contains('regeneratereadmetable'))">
    <ProjectToBuild Include="$(RepoRoot)tools-local\regenerate-readme-table.proj" />
  </ItemGroup>

</Project>
