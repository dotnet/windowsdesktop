<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>
    
    <!-- Enable WiX v5 features (following reference repo pattern) -->
    <UseWix5>true</UseWix5>
    
    <!-- WiX v5 build configuration -->
    <WixBuildExecutablesFolder>$(PkgMicrosoft_Wix)\tools\net6.0\</WixBuildExecutablesFolder>
    <WixExtensionDirectory>$(PkgMicrosoft_Wix)\tools\net6.0\</WixExtensionDirectory>
    
    <!-- MSBuild parallelism settings to prevent WiX file locking issues -->
    <BuildInParallel>false</BuildInParallel>
    <MaxCpuCount>1</MaxCpuCount>
    
    <!-- CI-specific build stability measures -->
    <DisableWixCreateLightCommandPackageDrop Condition="'$(TF_BUILD)' == 'true' OR '$(CI)' == 'true'">true</DisableWixCreateLightCommandPackageDrop>
    <WixCreateWixPackOutput Condition="'$(TF_BUILD)' == 'true' OR '$(CI)' == 'true'">false</WixCreateWixPackOutput>
    
    <!-- Bundle platform configuration -->
    <BundlePlatform Condition="'$(TargetArchitecture)' == 'x86'">x86</BundlePlatform>
    <BundlePlatform Condition="'$(TargetArchitecture)' == 'x64'">x64</BundlePlatform>
    <BundlePlatform Condition="'$(TargetArchitecture)' == 'arm64'">arm64</BundlePlatform>
    
    <!-- Set InstallerPlatform to match TargetArchitecture if not already set -->
    <InstallerPlatform Condition="'$(InstallerPlatform)' == ''">$(TargetArchitecture)</InstallerPlatform>
    
    <!-- Version information for the bundle executable -->
    <AssemblyTitle>Microsoft Windows Desktop Runtime Installer</AssemblyTitle>
    <AssemblyDescription>Microsoft Windows Desktop Runtime $(Version) Installer</AssemblyDescription>
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Windows Desktop Runtime</AssemblyProduct>
    <AssemblyCopyright>Â© Microsoft Corporation. All rights reserved.</AssemblyCopyright>
    <AssemblyInformationalVersion>$(Version)</AssemblyInformationalVersion>
    <AssemblyFileVersion>$(Version)</AssemblyFileVersion>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    
    <!-- WiX v5 PDB configuration - bundles don't publish PDBs -->
    <WixToolsetCompilerPdbType>full</WixToolsetCompilerPdbType>
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <NoWarn>$(NoWarn);WIX1098</NoWarn>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*;theme\**\*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <!-- Use the working wix5 path - the new wix path has namespace issues -->
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />
    <Compile Include="dotnet-packages.wxs" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <!-- Microsoft.Wix is a dotnet tool package, so exclude its assets (following reference repo pattern) -->
    <PackageReference Include="Microsoft.Wix" ExcludeAssets="all" />
    <!-- WiX extension packages with GeneratePathProperty for installers -->
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Dependency.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.WixToolset.Heat" />
    
    <!-- WindowsDesktop transport package containing runtime MSI components -->
    <PackageReference Include="Microsoft.Internal.Runtime.WindowsDesktop.Transport" 
                      GeneratePathProperty="true" />
    
    <!-- VS.Redist.Common.NetCore packages will be added via PackageDownload in CollectVSInsertionPackageDownloads target -->
  </ItemGroup>

  <ItemGroup>
    <!-- Ensure the Windows Desktop Runtime is built before this bundle -->
    <ProjectReference Include="..\sfx\Microsoft.WindowsDesktop.App.Runtime.sfxproj" />
  </ItemGroup>


  <!-- Deterministic prerequisite runtime MSI staging.
       Contract: If (and only if) all three canonical prerequisite MSI files exist under
         artifacts/prereqs/<arch>/ : dotnet-host-win-<arch>.msi
                                       dotnet-hostfxr-win-<arch>.msi
                                       dotnet-runtime-win-<arch>.msi
       then IncludeRuntimeMSIs=true and the bundle embeds them. Otherwise they are omitted.
       No probing of VS.Redist packages or partial inclusion attempts. -->
  <Target Name="StagePrereqRuntimeMsis" BeforeTargets="_GetBundledComponentInstallers">
    <!-- Directory where prereq MSIs are expected if provided -->
    <PropertyGroup>
      <PrereqRuntimeMsisDir>$(ArtifactsRoot)prereqs\$(TargetArchitecture)\</PrereqRuntimeMsisDir>
      <!-- Fallback if ArtifactsRoot not defined: derive from project location -->
      <PrereqRuntimeMsisDir Condition="'$(ArtifactsRoot)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\prereqs\$(TargetArchitecture)\</PrereqRuntimeMsisDir>
    </PropertyGroup>

    <ItemGroup Condition="Exists('$(PrereqRuntimeMsisDir)')">
      <_PrereqHost Include="$(PrereqRuntimeMsisDir)dotnet-host-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-host-win-$(TargetArchitecture).msi')" />
      <_PrereqHostFxr Include="$(PrereqRuntimeMsisDir)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />
      <_PrereqRuntime Include="$(PrereqRuntimeMsisDir)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="Exists('$(PrereqRuntimeMsisDir)dotnet-runtime-win-$(TargetArchitecture).msi')" />
    </ItemGroup>

    <PropertyGroup>
      <PrereqMsisAvailable Condition="'@(_PrereqHost)' != '' AND '@(_PrereqHostFxr)' != '' AND '@(_PrereqRuntime)' != ''">true</PrereqMsisAvailable>
      <PrereqMsisAvailable Condition="'$(PrereqMsisAvailable)'==''">false</PrereqMsisAvailable>
    </PropertyGroup>

    <Message Importance="high" Text="[PrereqRuntime] Dir=$(PrereqRuntimeMsisDir) Available=$(PrereqMsisAvailable)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] Host=@(_PrereqHost)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] HostFxr=@(_PrereqHostFxr)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] Runtime=@(_PrereqRuntime)" />

    <!-- Fail internal CI on partial presence (some but not all) -->
    <Error Condition="'$(ContinuousIntegrationBuild)'=='true' AND '$(System_TeamProject)'!='public' AND '$(PrereqMsisAvailable)'!='true' AND (@(_PrereqHost)!='' OR @(_PrereqHostFxr)!='' OR @(_PrereqRuntime)!='')"
           Text="Partial prerequisite runtime MSIs detected (some files missing). Provide all three or none." />

    <!-- Warn public builds only -->
    <Warning Condition="'$(System_TeamProject)'=='public' AND '$(PrereqMsisAvailable)'!='true'" 
             Text="Public build: runtime prerequisite MSIs not staged; bundle will exclude them (WindowsDesktop MSI only)." />

    <!-- Define constants for WiX consumption -->
    <PropertyGroup Condition="'$(PrereqMsisAvailable)'=='true'">
      <DotNetHostMsiPath>@(_PrereqHost)</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath>@(_PrereqHostFxr)</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath>@(_PrereqRuntime)</DotNetRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=true;DotNetHostMsiPath=$(DotNetHostMsiPath);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(PrereqMsisAvailable)'!='true'">
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=false</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="StagePrereqRuntimeMsis">
    <PropertyGroup>
      <!-- Essential bundle metadata -->
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <!-- BundleVersion must be purely numeric for proper version comparison during upgrades -->
      <!-- Use VersionSuffixDateStamp (e.g., 25467) if available, otherwise use default build number -->
      <!-- This ensures RC2 build number is higher than RC1 (10.0.0.35301) -->
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' != ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).$(VersionSuffixDateStamp)</DefineConstants>
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' == ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).50000</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>
      
      <!-- Generate UpgradeCodes with major version for proper upgrade behavior -->
      <!-- In-place upgrades within major.minor versions, SxS across major versions -->
      <!-- IMPORTANT: RC1 used UpgradeCode {39A4DBC3-2C46-4F31-9C0D-E4B1B4B526DE} - seed should generate this -->
      <UpgradeCodeSeed>Windows Desktop Shared Framework Bundle Installer</UpgradeCodeSeed>
      <!-- WiX v5 generates different GUIDs than WiX v3 - can't match RC1 exactly -->
      <!-- Use consistent seed for WiX v5 going forward with arch for SxS support -->
      <UpgradeCodeSeedWithArch>$(UpgradeCodeSeed) $(TargetArchitecture) $(MajorVersion).$(MinorVersion)</UpgradeCodeSeedWithArch>
      
      <!-- Architecture and platform -->
      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <!-- Version information -->
      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <!-- Windows Desktop Runtime MSI (always from local build) -->
      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      
  <!-- .NET Runtime prerequisite MSI paths (optional) were set by StagePrereqRuntimeMsis target -->
      
      <!-- Set MSI paths for all bundle components -->
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiPath=$(DotNetHostMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>
    
    <!-- MSI path logging for WindowsDesktop MSI -->
    <Message Text="Bundle MSI Components:" Importance="high" />
    <Message Text="  Windows Desktop Runtime: $(WindowsDesktopRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(WindowsDesktopRuntimeMsiPath)')))" Importance="high" />
    <!-- Runtime MSI logging already emitted in StagePrereqRuntimeMsis target -->
  </Target>

  <!-- Bundle publication to shipping directory -->
  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <!-- Generate deterministic UpgradeCode from seed -->
  <Target Name="GenerateUpgradeCode" AfterTargets="SetInstallerInfo">
    <!-- Use Microsoft.DotNet.Build.Tasks.Installers task to generate GUID from seed -->
    <GenerateGuidFromName Name="$(UpgradeCodeSeedWithArch)">
      <Output TaskParameter="GeneratedGuid" PropertyName="GeneratedUpgradeCode" />
    </GenerateGuidFromName>
    
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);UpgradeCode={$(GeneratedUpgradeCode)}</DefineConstants>
    </PropertyGroup>
    
    <Message Text="Generated UpgradeCode for $(TargetArchitecture) v$(MajorVersion).$(MinorVersion): {$(GeneratedUpgradeCode)} from seed '$(UpgradeCodeSeedWithArch)'" Importance="high" />
  </Target>

  <!-- Pack target for CI compatibility -->
  <Target Name="Pack" DependsOnTargets="Build;PublishBundle">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

</Project>



































