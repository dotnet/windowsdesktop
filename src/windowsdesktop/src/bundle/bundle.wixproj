<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>
    
    <!-- Runtime identifiers for multi-architecture support -->
    <RuntimeIdentifiers>win-x64;win-x86;win-arm64</RuntimeIdentifiers>
    
    <!-- Version information for the bundle executable -->
    <AssemblyTitle>Microsoft Windows Desktop Runtime Installer</AssemblyTitle>
    <AssemblyDescription>Microsoft Windows Desktop Runtime $(Version) Installer</AssemblyDescription>
    <AssemblyCompany>Microsoft Corporation</AssemblyCompany>
    <AssemblyProduct>Microsoft Windows Desktop Runtime</AssemblyProduct>
    <AssemblyCopyright>Â© Microsoft Corporation. All rights reserved.</AssemblyCopyright>
    <AssemblyInformationalVersion>$(Version)</AssemblyInformationalVersion>
    <AssemblyFileVersion>$(Version)</AssemblyFileVersion>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    
    <!-- WiX v5 PDB configuration - bundles don't publish PDBs -->
    <WixToolsetCompilerPdbType>full</WixToolsetCompilerPdbType>
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <NoWarn>$(NoWarn);WIX1098</NoWarn>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*;theme\**\*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" />
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" />
  </ItemGroup>

  <ItemGroup>
    <!-- Ensure the Windows Desktop Runtime is built before this bundle -->
    <ProjectReference Include="..\sfx\Microsoft.WindowsDesktop.App.Runtime.sfxproj" />
  </ItemGroup>

  <!-- Collect VS insertion packages for .NET Core runtime components -->
  <Target Name="CollectVSInsertionPackageDownloads" BeforeTargets="CollectPackageReferences">
    <PropertyGroup>
      <_CurrentArch>$(RuntimeIdentifier.Replace('win-', ''))</_CurrentArch>
    </PropertyGroup>
    <ItemGroup>
      <!-- VS insertion packages for current architecture -->
      <PackageDownload Include="VS.Redist.Common.NetCore.SharedFramework.$(_CurrentArch).10.0" Version="[$(MicrosoftNETCorePlatformsVersion)]" />
      <PackageDownload Include="VS.Redist.Common.NetCore.HostFXR.$(_CurrentArch).10.0" Version="[$(MicrosoftNETCorePlatformsVersion)]" />
      <PackageDownload Include="VS.Redist.Common.NetCore.SharedHost.$(_CurrentArch).10.0" Version="[$(MicrosoftNETCorePlatformsVersion)]" />
    </ItemGroup>
  </Target>

  <!-- Locate .NET Core runtime MSI files from build artifacts OR VS insertion packages -->
  <Target Name="GetBundledNETCoreRuntimeMsiFiles" DependsOnTargets="CollectVSInsertionPackageDownloads" BeforeTargets="SetInstallerInfo">
    <!-- Check for locally built .NET Core MSI files first -->
    <PropertyGroup>
      <_LocalDotNetRuntimeMsi>$(ArtifactsPackagesDir)Shipping\dotnet-runtime-$(Version)-win-$(TargetArchitecture).msi</_LocalDotNetRuntimeMsi>
      <_LocalDotNetHostFxrMsi>$(ArtifactsPackagesDir)Shipping\dotnet-hostfxr-$(Version)-win-$(TargetArchitecture).msi</_LocalDotNetHostFxrMsi>
      <_LocalDotNetHostMsi>$(ArtifactsPackagesDir)Shipping\dotnet-host-$(Version)-win-$(TargetArchitecture).msi</_LocalDotNetHostMsi>
    </PropertyGroup>

    <!-- If local MSIs don't exist, fall back to VS insertion packages -->
    <ItemGroup Condition="!Exists('$(_LocalDotNetRuntimeMsi)')">
      <_RuntimePackageVersionDirs Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedframework.$(_CurrentArch).10.0\*" />
      <_HostFxrPackageVersionDirs Include="$(NuGetPackageRoot)vs.redist.common.netcore.hostfxr.$(_CurrentArch).10.0\*" />
      <_SharedHostPackageVersionDirs Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedhost.$(_CurrentArch).10.0\*" />
    </ItemGroup>
    
    <PropertyGroup Condition="!Exists('$(_LocalDotNetRuntimeMsi)')">
      <!-- Get the latest version directory from NuGet packages (use hard-coded fallback for now) -->
      <_LatestRuntimeVersion Condition="'@(_RuntimePackageVersionDirs)' != ''">$(MicrosoftNETCorePlatformsVersion)</_LatestRuntimeVersion>
      <_LatestHostFxrVersion Condition="'@(_HostFxrPackageVersionDirs)' != ''">$(MicrosoftNETCorePlatformsVersion)</_LatestHostFxrVersion>
      <_LatestSharedHostVersion Condition="'@(_SharedHostPackageVersionDirs)' != ''">$(MicrosoftNETCorePlatformsVersion)</_LatestSharedHostVersion>
    </PropertyGroup>
    
    <!-- Set paths for MSI files: prefer local build artifacts over NuGet packages -->
    <PropertyGroup>
      <_VsInsertionPackageDir Condition="'$(_LatestRuntimeVersion)' != ''">$(NuGetPackageRoot)vs.redist.common.netcore.sharedframework.$(_CurrentArch).10.0\$(_LatestRuntimeVersion)\</_VsInsertionPackageDir>
      <_HostFxrPackageDir Condition="'$(_LatestHostFxrVersion)' != ''">$(NuGetPackageRoot)vs.redist.common.netcore.hostfxr.$(_CurrentArch).10.0\$(_LatestHostFxrVersion)\</_HostFxrPackageDir>
      <_SharedHostPackageDir Condition="'$(_LatestSharedHostVersion)' != ''">$(NuGetPackageRoot)vs.redist.common.netcore.sharedhost.$(_CurrentArch).10.0\$(_LatestSharedHostVersion)\</_SharedHostPackageDir>
      
      <!-- Try NuGet packages if local files don't exist -->
      <DotNetRuntimeMsiFromNuGet Condition="!Exists('$(_LocalDotNetRuntimeMsi)') AND '$(_VsInsertionPackageDir)' != '' AND Exists('$(_VsInsertionPackageDir)dotnet-runtime-$(_LatestRuntimeVersion)-$(RuntimeIdentifier).msi')">$(_VsInsertionPackageDir)dotnet-runtime-$(_LatestRuntimeVersion)-$(RuntimeIdentifier).msi</DotNetRuntimeMsiFromNuGet>
      <DotNetHostFxrMsiFromNuGet Condition="!Exists('$(_LocalDotNetHostFxrMsi)') AND '$(_HostFxrPackageDir)' != '' AND Exists('$(_HostFxrPackageDir)dotnet-hostfxr-$(_LatestHostFxrVersion)-$(RuntimeIdentifier).msi')">$(_HostFxrPackageDir)dotnet-hostfxr-$(_LatestHostFxrVersion)-$(RuntimeIdentifier).msi</DotNetHostFxrMsiFromNuGet>
      <DotNetHostMsiFromNuGet Condition="!Exists('$(_LocalDotNetHostMsi)') AND '$(_SharedHostPackageDir)' != '' AND Exists('$(_SharedHostPackageDir)dotnet-host-$(_LatestSharedHostVersion)-$(RuntimeIdentifier).msi')">$(_SharedHostPackageDir)dotnet-host-$(_LatestSharedHostVersion)-$(RuntimeIdentifier).msi</DotNetHostMsiFromNuGet>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="GetBundledNETCoreRuntimeMsiFiles">
    <PropertyGroup>
      <!-- Essential bundle metadata -->
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);BundleVersion=$(Version)</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);UpgradeCode={39A4DBC3-2C46-4F31-9C0D-E4B1B4B526DE}</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>
      
      <!-- Architecture and platform -->
      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <!-- Version and component information -->
      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MINIMUMVSVERSION=$(MinimumVSVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <!-- MSI paths: prefer local build artifacts, then fall back to VS insertion packages -->
      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      <DotNetRuntimeMsiPath Condition="Exists('$(_LocalDotNetRuntimeMsi)')">$(_LocalDotNetRuntimeMsi)</DotNetRuntimeMsiPath>
      <DotNetRuntimeMsiPath Condition="'$(DotNetRuntimeMsiPath)' == '' AND '$(DotNetRuntimeMsiFromNuGet)' != ''">$(DotNetRuntimeMsiFromNuGet)</DotNetRuntimeMsiPath>
      <DotNetHostFxrMsiPath Condition="Exists('$(_LocalDotNetHostFxrMsi)')">$(_LocalDotNetHostFxrMsi)</DotNetHostFxrMsiPath>
      <DotNetHostFxrMsiPath Condition="'$(DotNetHostFxrMsiPath)' == '' AND '$(DotNetHostFxrMsiFromNuGet)' != ''">$(DotNetHostFxrMsiFromNuGet)</DotNetHostFxrMsiPath>
      <DotNetHostMsiPath Condition="Exists('$(_LocalDotNetHostMsi)')">$(_LocalDotNetHostMsi)</DotNetHostMsiPath>
      <DotNetHostMsiPath Condition="'$(DotNetHostMsiPath)' == '' AND '$(DotNetHostMsiFromNuGet)' != ''">$(DotNetHostMsiFromNuGet)</DotNetHostMsiPath>
      
      <!-- Pass MSI paths and existence flags to WiX -->
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiPath=$(DotNetHostMsiPath)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeMsiExists=$([System.IO.File]::Exists('$(DotNetRuntimeMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostFxrMsiExists=$([System.IO.File]::Exists('$(DotNetHostFxrMsiPath)'))</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetHostMsiExists=$([System.IO.File]::Exists('$(DotNetHostMsiPath)'))</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>
  </Target>

  <!-- Bundle publication to shipping directory -->
  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <!-- Pack target for CI compatibility -->
  <Target Name="Pack" DependsOnTargets="Build;PublishBundle">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

</Project>
