<Project>
  <!-- Extracted WiX build targets for Windows Desktop Runtime bundle -->

  <!-- Transport package extraction (ASP.NET Core pattern) -->
  <Target Name="ExtractRuntimeTransportPackages" 
          BeforeTargets="StagePrereqRuntimeMsis"
          Condition="'$(SkipRuntimeTransportExtraction)' != 'true'">
    
    <PropertyGroup>
      <!-- Use the primary prereqs path that StagePrereqRuntimeMsis expects -->
      <_RuntimeTransportDir>$(ArtifactsRoot)prereqs\$(TargetArchitecture)\</_RuntimeTransportDir>
      <_RuntimeTransportDir Condition="'$(ArtifactsRoot)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\prereqs\$(TargetArchitecture)\</_RuntimeTransportDir>
    </PropertyGroup>

    <!-- Create prereqs directory -->
    <MakeDir Directories="$(_RuntimeTransportDir)" />

    <!-- Extract runtime MSIs from VS.Redist transport packages (available in internal feeds) -->
    <ItemGroup>
      <!-- Primary source: VS.Redist transport packages for runtime MSIs -->
      <_HostTransportFiles Include="$(PkgVS_Redist_Common_NetCore_SharedHost)\**\dotnet-host-*-win-$(TargetArchitecture).msi" Condition="'$(PkgVS_Redist_Common_NetCore_SharedHost)' != ''" />
      <_HostFxrTransportFiles Include="$(PkgVS_Redist_Common_NetCore_HostFXR)\**\dotnet-hostfxr-*-win-$(TargetArchitecture).msi" Condition="'$(PkgVS_Redist_Common_NetCore_HostFXR)' != ''" />
      <_RuntimeTransportFiles Include="$(PkgVS_Redist_Common_NetCore_SharedFramework)\**\dotnet-runtime-*-win-$(TargetArchitecture).msi" Condition="'$(PkgVS_Redist_Common_NetCore_SharedFramework)' != ''" />
      
      <!-- Fallback: Look in NuGet cache -->
      <_HostTransportFiles Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedhost\**\dotnet-host-*-win-$(TargetArchitecture).msi" Condition="'@(_HostTransportFiles)' == ''" />
      <_HostFxrTransportFiles Include="$(NuGetPackageRoot)vs.redist.common.netcore.hostfxr\**\dotnet-hostfxr-*-win-$(TargetArchitecture).msi" Condition="'@(_HostFxrTransportFiles)' == ''" />
      <_RuntimeTransportFiles Include="$(NuGetPackageRoot)vs.redist.common.netcore.sharedframework\**\dotnet-runtime-*-win-$(TargetArchitecture).msi" Condition="'@(_RuntimeTransportFiles)' == ''" />
    </ItemGroup>

    <Message Text="[Transport] VS.Redist SharedHost: $(PkgVS_Redist_Common_NetCore_SharedHost)" Importance="high" />
    <Message Text="[Transport] VS.Redist HostFXR: $(PkgVS_Redist_Common_NetCore_HostFXR)" Importance="high" />
    <Message Text="[Transport] VS.Redist SharedFramework: $(PkgVS_Redist_Common_NetCore_SharedFramework)" Importance="high" />
    <Message Text="[Transport] TargetArchitecture: $(TargetArchitecture), DotNetRuntimeVersion: $(DotNetRuntimeVersion)" Importance="high" />
    <Message Text="[Transport] Host MSIs found: @(_HostTransportFiles->'%(RecursiveDir)%(Filename)%(Extension)', ', ')" Importance="high" Condition="'@(_HostTransportFiles)' != ''" />
    <Message Text="[Transport] HostFxr MSIs found: @(_HostFxrTransportFiles->'%(RecursiveDir)%(Filename)%(Extension)', ', ')" Importance="high" Condition="'@(_HostFxrTransportFiles)' != ''" />
    <Message Text="[Transport] Runtime MSIs found: @(_RuntimeTransportFiles->'%(RecursiveDir)%(Filename)%(Extension)', ', ')" Importance="high" Condition="'@(_RuntimeTransportFiles)' != ''" />
    <Message Text="[Transport] No runtime MSI transport packages found - continuing with Windows Desktop Runtime-only bundle" Importance="high" Condition="'@(_HostTransportFiles)' == '' AND '@(_HostFxrTransportFiles)' == '' AND '@(_RuntimeTransportFiles)' == ''" />
    <Message Text="[Transport] Note: VS.Redist.Common.NetCore.* packages require internal feeds configured via SetupNugetSources script" Importance="high" Condition="'@(_HostTransportFiles)' == '' AND '@(_HostFxrTransportFiles)' == '' AND '@(_RuntimeTransportFiles)' == ''" />

    <!-- Copy and rename to expected filenames (remove version from filename) -->
    <Copy SourceFiles="@(_HostTransportFiles)" 
          DestinationFiles="$(_RuntimeTransportDir)dotnet-host-win-$(TargetArchitecture).msi" 
          SkipUnchangedFiles="true" 
          Condition="'@(_HostTransportFiles)' != ''" />
          
    <Copy SourceFiles="@(_HostFxrTransportFiles)" 
          DestinationFiles="$(_RuntimeTransportDir)dotnet-hostfxr-win-$(TargetArchitecture).msi" 
          SkipUnchangedFiles="true" 
          Condition="'@(_HostFxrTransportFiles)' != ''" />
          
    <Copy SourceFiles="@(_RuntimeTransportFiles)" 
          DestinationFiles="$(_RuntimeTransportDir)dotnet-runtime-win-$(TargetArchitecture).msi" 
          SkipUnchangedFiles="true" 
          Condition="'@(_RuntimeTransportFiles)' != ''" />

    <Message Text="[Transport] Extraction complete. Staged MSIs in: $(_RuntimeTransportDir)" Importance="high" />
  </Target>

  <!-- Flexible prerequisite runtime MSI staging with robust discovery -->
  <Target Name="StagePrereqRuntimeMsis" BeforeTargets="_GetBundledComponentInstallers">
    <!-- Define multiple search paths for runtime prerequisite MSIs -->
    <PropertyGroup>
      <!-- Primary: Explicit prereqs subfolder -->
      <_PrereqSearchPath1>$(ArtifactsRoot)prereqs\$(TargetArchitecture)\</_PrereqSearchPath1>
      <_PrereqSearchPath1 Condition="'$(ArtifactsRoot)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\prereqs\$(TargetArchitecture)\</_PrereqSearchPath1>
      
      <!-- Secondary: Packages\Shipping (common CI layout) -->
      <_PrereqSearchPath2>$(ArtifactsPackagesDir)Shipping\</_PrereqSearchPath2>
      <_PrereqSearchPath2 Condition="'$(ArtifactsPackagesDir)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\packages\Shipping\</_PrereqSearchPath2>
      
      <!-- Tertiary: Packages\Debug\Shipping (alternative CI layout) -->
      <_PrereqSearchPath3>$(ArtifactsPackagesDir)Debug\Shipping\</_PrereqSearchPath3>
      <_PrereqSearchPath3 Condition="'$(ArtifactsPackagesDir)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\packages\Debug\Shipping\</_PrereqSearchPath3>
      
      <!-- Quaternary: Artifacts root with architecture suffix -->
      <_PrereqSearchPath4>$(ArtifactsRoot)bin\$(TargetArchitecture)\</_PrereqSearchPath4>
      <_PrereqSearchPath4 Condition="'$(ArtifactsRoot)'==''">$(MSBuildThisFileDirectory)..\..\..\..\artifacts\bin\$(TargetArchitecture)\</_PrereqSearchPath4>
    </PropertyGroup>

    <!-- Search for prerequisite MSIs in multiple locations -->
    <ItemGroup>
      <!-- Try each search path in order of preference -->
      <_PrereqHost Include="$(_PrereqSearchPath1)dotnet-host-win-$(TargetArchitecture).msi" Condition="Exists('$(_PrereqSearchPath1)dotnet-host-win-$(TargetArchitecture).msi')" />
      <_PrereqHost Include="$(_PrereqSearchPath2)dotnet-host-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHost)'=='' AND Exists('$(_PrereqSearchPath2)dotnet-host-win-$(TargetArchitecture).msi')" />
      <_PrereqHost Include="$(_PrereqSearchPath3)dotnet-host-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHost)'=='' AND Exists('$(_PrereqSearchPath3)dotnet-host-win-$(TargetArchitecture).msi')" />
      <_PrereqHost Include="$(_PrereqSearchPath4)dotnet-host-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHost)'=='' AND Exists('$(_PrereqSearchPath4)dotnet-host-win-$(TargetArchitecture).msi')" />

      <_PrereqHostFxr Include="$(_PrereqSearchPath1)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="Exists('$(_PrereqSearchPath1)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />
      <_PrereqHostFxr Include="$(_PrereqSearchPath2)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHostFxr)'=='' AND Exists('$(_PrereqSearchPath2)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />
      <_PrereqHostFxr Include="$(_PrereqSearchPath3)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHostFxr)'=='' AND Exists('$(_PrereqSearchPath3)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />
      <_PrereqHostFxr Include="$(_PrereqSearchPath4)dotnet-hostfxr-win-$(TargetArchitecture).msi" Condition="'@(_PrereqHostFxr)'=='' AND Exists('$(_PrereqSearchPath4)dotnet-hostfxr-win-$(TargetArchitecture).msi')" />

      <_PrereqRuntime Include="$(_PrereqSearchPath1)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="Exists('$(_PrereqSearchPath1)dotnet-runtime-win-$(TargetArchitecture).msi')" />
      <_PrereqRuntime Include="$(_PrereqSearchPath2)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="'@(_PrereqRuntime)'=='' AND Exists('$(_PrereqSearchPath2)dotnet-runtime-win-$(TargetArchitecture).msi')" />
      <_PrereqRuntime Include="$(_PrereqSearchPath3)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="'@(_PrereqRuntime)'=='' AND Exists('$(_PrereqSearchPath3)dotnet-runtime-win-$(TargetArchitecture).msi')" />
      <_PrereqRuntime Include="$(_PrereqSearchPath4)dotnet-runtime-win-$(TargetArchitecture).msi" Condition="'@(_PrereqRuntime)'=='' AND Exists('$(_PrereqSearchPath4)dotnet-runtime-win-$(TargetArchitecture).msi')" />
    </ItemGroup>

    <PropertyGroup>
      <PrereqMsisAvailable Condition="'@(_PrereqHost)' != '' AND '@(_PrereqHostFxr)' != '' AND '@(_PrereqRuntime)' != ''">true</PrereqMsisAvailable>
      <PrereqMsisAvailable Condition="'$(PrereqMsisAvailable)'==''">false</PrereqMsisAvailable>
    </PropertyGroup>

    <!-- Enhanced diagnostic logging -->
    <Message Importance="high" Text="[PrereqRuntime] Architecture=$(TargetArchitecture) Available=$(PrereqMsisAvailable)" />
    <Message Importance="low" Text="[PrereqRuntime] Search paths tested:" />
    <Message Importance="low" Text="  1. $(_PrereqSearchPath1) (Exists: $([System.IO.Directory]::Exists('$(_PrereqSearchPath1)')))" />
    <Message Importance="low" Text="  2. $(_PrereqSearchPath2) (Exists: $([System.IO.Directory]::Exists('$(_PrereqSearchPath2)')))" />
    <Message Importance="low" Text="  3. $(_PrereqSearchPath3) (Exists: $([System.IO.Directory]::Exists('$(_PrereqSearchPath3)')))" />
    <Message Importance="low" Text="  4. $(_PrereqSearchPath4) (Exists: $([System.IO.Directory]::Exists('$(_PrereqSearchPath4)')))" />
    
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="[PrereqRuntime] Found MSIs:" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="  Host: @(_PrereqHost)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="  HostFxr: @(_PrereqHostFxr)" />
    <Message Importance="high" Condition="'$(PrereqMsisAvailable)'=='true'" Text="  Runtime: @(_PrereqRuntime)" />

    <!-- Enhanced error reporting -->
    <Message Condition="'$(PrereqMsisAvailable)'!='true'" Importance="high" Text="[PrereqRuntime] MSI discovery status ($(TargetArchitecture)):" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqHost) != ''" Importance="high" Text="  dotnet-host-win-$(TargetArchitecture).msi: Found" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqHost) == ''" Importance="high" Text="  dotnet-host-win-$(TargetArchitecture).msi: Missing" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqHostFxr) != ''" Importance="high" Text="  dotnet-hostfxr-win-$(TargetArchitecture).msi: Found" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqHostFxr) == ''" Importance="high" Text="  dotnet-hostfxr-win-$(TargetArchitecture).msi: Missing" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqRuntime) != ''" Importance="high" Text="  dotnet-runtime-win-$(TargetArchitecture).msi: Found" />
    <Message Condition="'$(PrereqMsisAvailable)'!='true' and @(_PrereqRuntime) == ''" Importance="high" Text="  dotnet-runtime-win-$(TargetArchitecture).msi: Missing" />

    <Message Condition="'$(ContinuousIntegrationBuild)'=='true' AND '$(System_TeamProject)'!='public' AND '$(PrereqMsisAvailable)'!='true' AND (@(_PrereqHost)!='' OR @(_PrereqHostFxr)!='' OR @(_PrereqRuntime)!='')" Importance="high" Text="Partial prerequisite runtime MSIs detected (some files missing). Provide all three or none." />
    <Message Condition="'$(System_TeamProject)'=='public' AND '$(PrereqMsisAvailable)'!='true'" Importance="high" Text="Public build: runtime prerequisite MSIs not staged; bundle will exclude them (WindowsDesktop MSI only)." />

    <PropertyGroup Condition="'$(PrereqMsisAvailable)'=='true'">
      <DotNetHostMsiPath>@(_PrereqHost)</DotNetHostMsiPath>
      <DotNetHostFxrMsiPath>@(_PrereqHostFxr)</DotNetHostFxrMsiPath>
      <DotNetRuntimeMsiPath>@(_PrereqRuntime)</DotNetRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=true;DotNetHostMsiPath=$(DotNetHostMsiPath);DotNetHostFxrMsiPath=$(DotNetHostFxrMsiPath);DotNetRuntimeMsiPath=$(DotNetRuntimeMsiPath)</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(PrereqMsisAvailable)'!='true'">
      <DefineConstants>$(DefineConstants);IncludeRuntimeMSIs=false</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile" DependsOnTargets="StagePrereqRuntimeMsis">
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);Version=$(MajorVersion).$(MinorVersion).$(PatchVersion)</DefineConstants>
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' != ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).$(VersionSuffixDateStamp)</DefineConstants>
      <DefineConstants Condition="'$(VersionSuffixDateStamp)' == ''">$(DefineConstants);BundleVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion).50000</DefineConstants>
      <DefineConstants>$(DefineConstants);Manufacturer=Microsoft Corporation</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkBrandName=Microsoft Windows Desktop Runtime</DefineConstants>

      <UpgradeCodeSeed>Windows Desktop Shared Framework Bundle Installer</UpgradeCodeSeed>
      <UpgradeCodeSeedWithArch>$(UpgradeCodeSeed) $(TargetArchitecture) $(MajorVersion).$(MinorVersion)</UpgradeCodeSeedWithArch>

      <DefineConstants>$(DefineConstants);TargetArchitecture=$(TargetArchitecture)</DefineConstants>
      <DefineConstants>$(DefineConstants);PlatformToken=$(TargetArchitecture.ToUpper())</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_x64=x64</DefineConstants>
      <DefineConstants>$(DefineConstants);NativeMachine_arm64=arm64</DefineConstants>

      <DefineConstants>$(DefineConstants);MajorVersion=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinorVersion=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMAJOR=$(MajorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);VERSIONMINOR=$(MinorVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <WindowsDesktopRuntimeMsiPath>$(ArtifactsPackagesDir)Shipping\windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).msi</WindowsDesktopRuntimeMsiPath>
      <DefineConstants>$(DefineConstants);WindowsDesktopRuntimeMsiPath=$(WindowsDesktopRuntimeMsiPath)</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' == '' OR !Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=false</DefineConstants>
    </PropertyGroup>

    <Message Text="Bundle MSI Components:" Importance="high" />
    <Message Text="  Windows Desktop Runtime: $(WindowsDesktopRuntimeMsiPath) (Exists: $([System.IO.File]::Exists('$(WindowsDesktopRuntimeMsiPath)')))" Importance="high" />
  </Target>

  <Target Name="PublishBundle" AfterTargets="Build">
    <PropertyGroup>
      <BundleShippingName>windowsdesktop-runtime-$(Version)-win-$(TargetArchitecture).exe</BundleShippingName>
      <BundleShippingPath>$(ArtifactsPackagesDir)Shipping\$(BundleShippingName)</BundleShippingPath>
    </PropertyGroup>
    <Copy SourceFiles="$(OutputPath)$(TargetFileName)" DestinationFiles="$(BundleShippingPath)" />
    <Message Text="Published bundle: $(BundleShippingPath)" Importance="high" />
  </Target>

  <Target Name="GenerateUpgradeCode" AfterTargets="SetInstallerInfo">
    <GenerateGuidFromName Name="$(UpgradeCodeSeedWithArch)">
      <Output TaskParameter="GeneratedGuid" PropertyName="GeneratedUpgradeCode" />
    </GenerateGuidFromName>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);UpgradeCode={$(GeneratedUpgradeCode)}</DefineConstants>
    </PropertyGroup>
    <Message Text="Generated UpgradeCode for $(TargetArchitecture) v$(MajorVersion).$(MinorVersion): {$(GeneratedUpgradeCode)} from seed '$(UpgradeCodeSeedWithArch)'" Importance="high" />
  </Target>

  <Target Name="Pack" DependsOnTargets="Build;PublishBundle;GenerateWixpackPackage">
    <Message Text="Bundle pack completed" Importance="high" />
  </Target>

  <!-- Generate a wixpack using the Wix toolset task (pattern aligned with aspnetcore). -->
  <!-- Run after Build to ensure all artifacts are ready, but before Pack -->
  <Target Name="GenerateWixpackPackage" AfterTargets="Build" BeforeTargets="Pack" Condition="'$(OutputType)'=='Bundle' AND '$(WixCreateWixPackOutput)'=='true' AND '$(RunWixpackTargets)'=='true'">
    <PropertyGroup>
      <WixpackWorkingDir>$(IntermediateOutputPath)wixpack</WixpackWorkingDir>
      <!-- Ensure WixCommandPackagesDir has a default value -->
      <WixpackOutputDir Condition="'$(WixCommandPackagesDir)'!=''">$(WixCommandPackagesDir)</WixpackOutputDir>
      <WixpackOutputDir Condition="'$(WixCommandPackagesDir)'==''">$(ArtifactsPackagesDir)Debug\NonShipping</WixpackOutputDir>
      <!-- Expected wixpack file name produced by CreateWixBuildWixpack (avoid duplicate creation if Light already produced one) -->
      <ExpectedBundleWixpackFile>$(WixpackOutputDir)\$(TargetFileName).wixpack.zip</ExpectedBundleWixpackFile>
      <!-- PDB name follows Wix default: TargetName + .wixpdb -->
      <_BundlePdbFile>$(TargetDir)$(TargetName).wixpdb</_BundlePdbFile>
    </PropertyGroup>
    <Message Text="[Wixpack] RunWixpackTargets=$(RunWixpackTargets), WixCreateWixPackOutput=$(WixCreateWixPackOutput)" Importance="high" />
    <Message Text="[Wixpack] WixpackOutputDir=$(WixpackOutputDir)" Importance="high" />
    <Message Text="[Wixpack] Existing wixpack detected at $(ExpectedBundleWixpackFile); skipping custom generation" Importance="high" Condition="Exists('$(ExpectedBundleWixpackFile)')" />
    <CreateWixBuildWixpack
        Condition="!Exists('$(ExpectedBundleWixpackFile)') AND '$(WixpackOutputDir)'!=''"
        InstallerPlatform="$(InstallerPlatform)"
        InstallerFile="$(TargetPath)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        OutputFolder="$(WixpackOutputDir)"
        OutputType="$(OutputType)"
        PdbFile="$(_BundlePdbFile)"
        PdbType="$(DebugType)"
        SourceFiles="@(Compile)"
        Extensions="@(_ResolvedWixExtensionPaths)"
        LocalizationFiles="@(_WixLocalizationFile)"
        BindPaths="@(BindPath)"
        WixpackWorkingDir="$(WixpackWorkingDir)"
        DefineConstants="$(DefineConstants)">
      <Output TaskParameter="OutputFile" PropertyName="_WixBuildCommandPackageNameOutput" />
    </CreateWixBuildWixpack>
    <Message Text="[Wixpack] Generated: $(_WixBuildCommandPackageNameOutput)" Importance="high" Condition="'$(_WixBuildCommandPackageNameOutput)'!=''" />
  </Target>
</Project>
